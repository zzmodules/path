using <libgen.h> as libgen
using <stdlib.h> as stdlib
using <unistd.h> as unistd

using err
using err::{ Err }
using log
using mem

/**
 * The max bytes used for a path by the functions in this module.
 */
export const usize PATH_MAX = 4096; // from <limits.h>

/**
 * A binding around libgen's `dirname()` function that adds theory
 * attestation assertions.
 */
export fn dirname(char mut *pathspec) -> char *
  model len(return) <= len(pathspec)
  model safe(return)
  model nullterm(return)
  where safe(pathspec)
  where nullterm(pathspec)
{
  let dir = unsafe<char *>(libgen::dirname(pathspec));
  static_attest(safe(dir));
  static_attest(nullterm(dir));
  static_attest(len(dir) <= len(pathspec));
  return dir;
}

/**
 * A binding around libgen's `basename()` function that adds theory
 * attestation assertions.
 */
export fn basename(char mut *pathspec) -> char *
  model len(return) <= len(pathspec)
  model safe(return)
  model nullterm(return)
  where safe(pathspec)
  where nullterm(pathspec)
{
  let base = unsafe<char *>(libgen::basename(pathspec));
  static_attest(safe(base));
  static_attest(nullterm(base));
  static_attest(len(base) <= len(pathspec));
  return base;
}

/**
 * A binding around stdlib's `realpath()` function that adds theory
 * attestation assertions.
 */
export fn realpath(char *pathspec, char mut *resolved, Err+ErrorTail mut *error) -> bool
  model nullterm(resolved) || false == return
  where err::checked(*error)
  where len(resolved) <= PATH_MAX
  where safe(resolved)
  where safe(pathspec)
  where nullterm(pathspec)
{
  if 0 == stdlib::realpath(pathspec, resolved) {
    error->fail_with_errno("%s", pathspec);
    return false;
  }

  static_attest(safe(resolved));
  static_attest(nullterm(resolved));
  static_attest(len(resolved) <= len(pathspec));
  return true;
}

/**
 * A binding around unistd's `getcwd()` function that adds theory
 * attestation assertions.
 */
export fn getcwd(char mut *resolved, usize size, Err+ErrorTail mut *error) -> bool
  model nullterm(resolved) || false == return
  where err::checked(*error)
  where len(resolved) <= PATH_MAX
  where safe(resolved)
{
  if 0 == unistd::getcwd(resolved, size) {
    error->fail_with_errno("Could not get current working directory.");
    return false;
  }

  static_attest(nullterm(resolved));
  return true;
}
